version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ytdl_postgres
    environment:
      POSTGRES_DB: ytdl_bot
      POSTGRES_USER: ytdl_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_me}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ytdl_user -d ytdl_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ytdl_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  aria2:
    image: p3terx/aria2-pro:latest
    container_name: ytdl_aria2
    environment:
      - PUID=1000
      - PGID=1000
      - RPC_SECRET=${ARIA2_SECRET:-your_aria2_secret}
      - RPC_PORT=6800
      - LISTEN_PORT=6888
    volumes:
      - aria2_config:/config
      - downloads:/downloads
    ports:
      - "6800:6800"
      - "6888:6888"
    restart: unless-stopped

  bot:
    build: .
    container_name: ytdl_bot
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      aria2:
        condition: service_started
    environment:
      # Telegram Configuration
      BOT_TOKEN: ${BOT_TOKEN}
      API_ID: ${API_ID}
      API_HASH: ${API_HASH}
      
      # Database Configuration
      DATABASE_URL: postgresql://ytdl_user:${DB_PASSWORD:-change_me}@postgres:5432/ytdl_bot
      REDIS_URL: redis://redis:6379/0
      
      # Aria2 Configuration
      ARIA2_RPC_URL: http://aria2:6800/rpc
      ARIA2_SECRET: ${ARIA2_SECRET:-your_aria2_secret}
      
      # Other configurations
      ADMIN_IDS: ${ADMIN_IDS}
      PAYMENT_PROVIDER_TOKEN: ${PAYMENT_PROVIDER_TOKEN:-}
      BOT_MODE: ${BOT_MODE:-polling}
      WEBHOOK_URL: ${WEBHOOK_URL:-}
      
    volumes:
      - downloads:/tmp/ytdl_downloads
      - ./logs:/app/logs
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Nginx for webhook mode
  nginx:
    image: nginx:alpine
    container_name: ytdl_nginx
    profiles: ["webhook"]
    depends_on:
      - bot
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped

  # Optional: Monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: ytdl_prometheus
    profiles: ["monitoring"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ytdl_grafana
    profiles: ["monitoring"]
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  aria2_config:
  downloads:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: ytdl_network